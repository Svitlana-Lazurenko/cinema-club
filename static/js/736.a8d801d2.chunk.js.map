{"version":3,"file":"static/js/736.a8d801d2.chunk.js","mappings":"wQAEaA,EAAYC,EAAAA,EAAAA,IAAH,6CAITC,EAAWD,EAAAA,EAAAA,GAAH,4EAMRE,EAAWF,EAAAA,EAAAA,GAAH,8IASRG,EAAeH,EAAAA,EAAAA,IAAH,kEAKZI,EAAOJ,EAAAA,EAAAA,EAAH,sBAEJK,EAAOL,EAAAA,EAAAA,KAAH,yGAOJM,EAAWN,EAAAA,EAAAA,KAAH,kEAKRO,EAAYP,EAAAA,EAAAA,KAAH,kFAMTQ,EAAgBR,EAAAA,EAAAA,KAAH,2C,SC/BpBS,EACE,OADFA,EAEK,UAFLA,EAGM,WAHNA,EAIM,WAoEZ,EAjEa,WACX,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASH,GAArC,eAAOM,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACRH,EAAUP,GAEVW,EAAAA,EAAAA,eACkBV,GACfW,MAAK,SAAAC,GACJ,GAA4B,IAAxBA,EAAQT,KAAKU,OACf,OAAOC,QAAQC,OAAO,IAAIC,MAAJ,mBAGxBZ,GAAQ,OAAIQ,EAAQT,OACpBG,EAAUP,EACX,IACAkB,OAAM,SAAAV,GACLC,EAASD,GACTD,EAAUP,EACX,GACJ,GAAE,CAACC,IAEW,SAAXK,EACK,KAGM,YAAXA,GACK,wCAGM,aAAXA,GACK,yBAAME,EAAMW,UAGN,aAAXb,GAEA,SAAChB,EAAD,WACE,SAACE,EAAD,UACGY,EAAKgB,KAAI,SAAAC,GAAO,OACf,UAAC5B,EAAD,YACE,SAACC,EAAD,CACE4B,IACED,EAAQE,aAAR,yCACsCF,EAAQE,cAC1C,0CAENC,IAAG,UAAKH,EAAQI,SAElB,UAAC9B,EAAD,YACE,SAACC,EAAD,sBACA,SAACC,EAAD,UAAWwB,EAAQI,QACnB,SAAC3B,EAAD,sBACA,SAACC,EAAD,UAAgBsB,EAAQK,iBAbbL,EAAQM,QADR,aAJzB,CA0BD,C,oBCrFD,IAAMC,EAAU,mCA0ChB,IAAMjB,EAAM,CACVkB,oBAzCF,WACE,OAAOC,MAAM,qGAAD,OAC2FF,IACrGhB,MAAK,SAAAmB,GACL,OAAOA,EAASC,MACjB,GACF,EAoCCC,oBAlCF,SAA6BC,GAC3B,OAAOJ,MAAM,6FAAD,OACmFI,EADnF,oBACoGN,IAC9GhB,MAAK,SAAAmB,GACL,OAAOA,EAASC,MACjB,GACF,EA6BCG,kBA3BF,SAA2BC,GACzB,OAAON,MAAM,sCAAD,OAC4BM,EAD5B,mCAC+DR,IACzEhB,MAAK,SAAAmB,GACL,OAAOA,EAASC,MACjB,GACF,EAsBCK,eApBF,SAAwBD,GACtB,OAAON,MAAM,sCAAD,OAC4BM,EAD5B,2CACuER,IACjFhB,MAAK,SAAAmB,GACL,OAAOA,EAASC,MACjB,GACF,EAeCM,kBAbF,SAA2BF,GACzB,OAAON,MAAM,sCAAD,OAC4BM,EAD5B,kDAC8ER,IACxFhB,MAAK,SAAAmB,GACL,OAAOA,EAASC,MACjB,GACF,GAUD,K","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movies-api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-top: 30px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const CastItem = styled.li`\n  width: 200px;\n  border: 1px solid orange;\n  padding: 10px;\n  :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ProfileImage = styled.img`\n  display: block;\n  margin: 0 auto 5px;\n`;\n\nexport const Info = styled.p``;\n\nexport const Name = styled.span`\n  display: block;\n  color: orange;\n  font-weight: 600;\n  margin-bottom: 5px;\n`;\n\nexport const TextName = styled.span`\n  display: block;\n  margin-bottom: 5px;\n`;\n\nexport const Character = styled.span`\n  display: block;\n  color: orange;\n  font-weight: 600;\n`;\n\nexport const TextCharacter = styled.span`\n  display: block;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../../services/movies-api';\nimport {\n  Container,\n  CastList,\n  CastItem,\n  ProfileImage,\n  Name,\n  Character,\n  TextCharacter,\n  TextName,\n  Info,\n} from './Cast.styled';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    api\n      .fetchMovieCast(id)\n      .then(castObj => {\n        if (castObj.cast.length === 0) {\n          return Promise.reject(new Error(`Cast not found`));\n        }\n\n        setCast([...castObj.cast]);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [id]);\n\n  if (status === 'idle') {\n    return null;\n  }\n\n  if (status === 'pending') {\n    return <div>Loading...</div>;\n  }\n\n  if (status === 'rejected') {\n    return <div>{error.message}</div>;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <Container>\n        <CastList>\n          {cast.map(profile => (\n            <CastItem key={profile.cast_id}>\n              <ProfileImage\n                src={\n                  profile.profile_path\n                    ? `https://image.tmdb.org/t/p/w200${profile.profile_path}`\n                    : 'https://fakeimg.pl/200x300?text=200x300'\n                }\n                alt={`${profile.name}`}\n              />\n              <Info>\n                <Name>Name: </Name>\n                <TextName>{profile.name}</TextName>\n                <Character>Role: </Character>\n                <TextCharacter>{profile.character}</TextCharacter>\n              </Info>\n            </CastItem>\n          ))}\n        </CastList>\n      </Container>\n    );\n  }\n};\n\nexport default Cast;\n","const API_KEY = 'df4f25ddce476816dc7867d9ac4bd1ea';\n\nfunction fetchTrendingMovies() {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/day?include_adult=false&language=en-US&page=1&api_key=${API_KEY}`\n  ).then(response => {\n    return response.json();\n  });\n}\n\nfunction fetchMoviesBySearch(title) {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?include_adult=false&language=en-US&page=1&query=${title}&api_key=${API_KEY}`\n  ).then(response => {\n    return response.json();\n  });\n}\n\nfunction fetchMovieDetails(movie_id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movie_id}?language=en-US&api_key=${API_KEY}`\n  ).then(response => {\n    return response.json();\n  });\n}\n\nfunction fetchMovieCast(movie_id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movie_id}/credits?language=en-US&api_key=${API_KEY}`\n  ).then(response => {\n    return response.json();\n  });\n}\n\nfunction fetchMovieReviews(movie_id) {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movie_id}/reviews?language=en-US&page=1&api_key=${API_KEY}`\n  ).then(response => {\n    return response.json();\n  });\n}\n\nconst api = {\n  fetchTrendingMovies,\n  fetchMoviesBySearch,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default api;\n"],"names":["Container","styled","CastList","CastItem","ProfileImage","Info","Name","TextName","Character","TextCharacter","Status","id","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","api","then","castObj","length","Promise","reject","Error","catch","message","map","profile","src","profile_path","alt","name","character","cast_id","API_KEY","fetchTrendingMovies","fetch","response","json","fetchMoviesBySearch","title","fetchMovieDetails","movie_id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}